# journey2-events-service-environment
AWSTemplateFormatVersion: 2010-09-09

Description: Creates an environment for the events service

Parameters:
  AlarmEMail:
    Description: EMail address to notify if there are any operational issues
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
    Default: "artemkv@gmail.com"

Resources:

  # Create an SNS topic for actions
  ActionSNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: "Journey2 Action Topic"
      TopicName: "journey2-actions"

  # Create an SNS topic for errors
  ErrorSNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: "Journey2 Error Topic"
      TopicName: "journey2-errors"

  # Create a role for publishing events
  EventsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "journey2-events-service-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole

  # Allow the role to use publish to the action topic
  PublishToActionSNSTopicPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "publish-to-journey2-actions"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - 'sns:Publish'
          Resource:
            - !Ref ActionSNSTopic
      Roles:
      - !Ref EventsServiceRole

  # Allow the role to use publish to the error topic
  PublishToErrorSNSTopicPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "publish-to-journey2-errors"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - 'sns:Publish'
          Resource:
            - !Ref ErrorSNSTopic
      Roles:
      - !Ref EventsServiceRole

  # Create an SQS queue for actions
  ActionsQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: "journey2-actions"

  # Allow SNS service to send messages to actions queue
  ActionsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: ActionsQueuePolicy
        Version: '2012-10-17'
        Statement:
        - Sid: Allow-SendMessage
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - sqs:SendMessage
          Resource: "*"
          Condition:
            ArnEquals:
              'aws:SourceArn': !Ref ActionSNSTopic
      Queues:
      - !Ref ActionsQueue

  # Subscribe action queue to action topic
  ActionsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt ActionsQueue.Arn
      RawMessageDelivery: true
      TopicArn: !Ref ActionSNSTopic

  # Create an SQS queue for errors
  ErrorsQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: "journey2-errors"

  # Allow SNS service to send messages to errors queue
  ErrorsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: ErrorsQueuePolicy
        Version: '2012-10-17'
        Statement:
        - Sid: Allow-SendMessage
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - sqs:SendMessage
          Resource: "*"
          Condition:
            ArnEquals:
              'aws:SourceArn': !Ref ErrorSNSTopic
      Queues:
      - !Ref ErrorsQueue

  # Subscribe error queue to error topic
  ErrorsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt ErrorsQueue.Arn
      RawMessageDelivery: true
      TopicArn: !Ref ErrorSNSTopic

  # Create a role for consuming events
  StatsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "journey2-stats-service-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole

  # Allow the role to receive and delete messages from actions queue
  ListenToActionsQueuePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ListenToActionsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:DeleteMessage'
              - 'sqs:ReceiveMessage'
            Resource:
              - !GetAtt 
                - ActionsQueue
                - Arn
      Roles:
      - !Ref StatsServiceRole

  # Allow the role to receive and delete messages from errors queue
  ListenToErrorsQueuePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ListenToErrorsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:DeleteMessage'
              - 'sqs:ReceiveMessage'
            Resource:
              - !GetAtt 
                - ErrorsQueue
                - Arn
      Roles:
      - !Ref StatsServiceRole

  # Create topic for action alarms
  ActionsAlarmTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref AlarmEMail
          Protocol: email

  # Create cloud watch alarm for actions
  ActionsQueueDepthAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Alarm if queue depth grows beyond 1000 messages
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt 
            - ActionsQueue
            - QueueName
      Statistic: Sum
      Period: 600 # in seconds
      EvaluationPeriods: 1
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ActionsAlarmTopic

  # Create topic for error alarms
  ErrorsAlarmTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref AlarmEMail
          Protocol: email

  # Create cloud watch alarm for actions
  ErrorsQueueDepthAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Alarm if queue depth grows beyond 1000 messages
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt
            - ErrorsQueue
            - QueueName
      Statistic: Sum
      Period: 600 # in seconds
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ErrorsAlarmTopic

Outputs:
  ActionSNSTopic:
    Description: Action Topic ARN
    Value: !Ref ActionSNSTopic
  ErrorSNSTopic:
    Description: Error Topic ARN
    Value: !Ref ErrorSNSTopic

  ActionsQueueURL:
    Description: URL of actions SQS Queue
    Value: !Ref ActionsQueue
  ActionsQueueARN:
    Description: ARN of actions SQS Queue
    Value: !GetAtt
      - ActionsQueue
      - Arn

  ErrorsQueueURL:
    Description: URL of errors SQS Queue
    Value: !Ref ErrorsQueue
  ErrorsQueueARN:
    Description: ARN of errors SQS Queue
    Value: !GetAtt
      - ErrorsQueue
      - Arn

  EventsServiceRole:
    Description: The role for publishing events
    Value: !Ref EventsServiceRole
  EventsServiceRoleARN:
    Description: ARN of the role for publishing events
    Value: !GetAtt
      - EventsServiceRole
      - Arn

  StatsServiceRole:
    Description: The role for consuming events
    Value: !Ref StatsServiceRole
  StatsServiceRoleARN:
    Description: ARN of the role for consuming events
    Value: !GetAtt
      - StatsServiceRole
      - Arn